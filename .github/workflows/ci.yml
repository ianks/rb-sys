---
name: "CI"

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  lint:
    name: 💅 Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: oxidize-rb/actions/setup-ruby-and-rust@main
        with:
          ruby-version: "3.1"
          rustup-toolchain: "stable"
          bundler-cache: true
          cargo-cache: true
      - name: ✂️ Run clippy
        run: cargo clippy
      - name: 📃 Run cargo fmt
        run: cargo fmt --check
      - name: 🚓 Run Standard.rb
        run: bundle exec standardrb --format github

  build_and_test:
    name: 🧪 Test
    strategy:
      fail-fast: false
      matrix:
        # Test against all versions supported by rubygems
        ruby_version: ["2.4", "2.5", "2.6", "2.7", "3.0", "3.1", "head"]
        sys:
          - os: ubuntu-latest
            rust_toolchain: "1.51"
          - os: ubuntu-latest
            rust_toolchain: stable
          - os: macos-latest
            rust_toolchain: stable
          - os: windows-2022
            rust_toolchain: stable
        include:
          - ruby_version: mswin
            sys:
              os: windows-2022
              rust_toolchain: stable-x86_64-pc-windows-msvc
    runs-on: ${{ matrix.sys.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: oxidize-rb/actions/setup-ruby-and-rust@main
        if: matrix.ruby_version != 'skip'
        with:
          ruby-version: ${{ matrix.ruby_version }}
          rustup-toolchain: ${{ matrix.sys.rust_toolchain }}
          bundler-cache: true
          cargo-cache: true

      - name: Debug makefile
        env:
          BUNDLE_GEM__TEST: "rpec"
          BUNDLE_GEM__CI: "github"
          BUNDLE_GEM__MIT: "true"
          BUNDLE_GEM__COC: "true"
          BUNDLE_GEM__CHANGELOG: "true"
          BUNDLE_GEM__LINTER: "standard"
        run: |
          mkdir tmp/
          cd tmp/
          bundle gem --ext testing
          cd testing/ext/testing
          ruby extconf.rb
          cat Makefile

      - name: Bundle install
        if: matrix.ruby_version == 'skip'
        shell: bash
        run: bundle install -j3

      - name: 📍 Examples test
        env:
          RB_SYS_CARGO_PROFILE: "release"
        run: bundle exec rake test:examples

      - name: 🧪 Cargo test
        run: bundle exec rake test:cargo

      - name: 💎 Gem test
        run: bundle exec rake test:gem

      - name: 💨 Smoke test
        shell: bash
        env:
          SKIP_GEM_SIGNING_FOR_LOCAL_INSTALL_ONLY: "true"
        run: |
          set -ex
          pushd gem && bundle exec rake install && popd
          cd examples/rust_reverse
          bundle exec rake build
          gem install pkg/*.gem --verbose
          ruby -rrust_reverse -e "puts RustReverse.reverse('olleh')" | grep hello

  build_and_test_static:
    name: 🔘 Static
    strategy:
      fail-fast: false
      matrix:
        ruby_version: ["3.1.2"]
        sys:
          - os: ubuntu-latest
            rust_toolchain: stable
    runs-on: ${{ matrix.sys.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        run: |
          echo "PATH=/opt/rubies/${{ matrix.ruby_version }}/bin:$PATH" >> $GITHUB_ENV
          echo "GEM_HOME=~/.gem/ruby/${{ matrix.ruby_version }}" >> $GITHUB_ENV

      - name: ⚡ Cache
        uses: actions/cache@v3
        with:
          path: |
            /opt/rubies/${{ matrix.ruby_version }}
            ~/.gem/ruby/${{ matrix.ruby_version }}
          key: rb-sys-ruby-static-${{ matrix.sys.os }}-${{ matrix.ruby_version }}

      - name: 🔘 Build static ruby
        working-directory: /tmp
        run: |
          if [ -d /opt/rubies/${{matrix.ruby_version }} ]; then
            echo "Ruby ${{ matrix.ruby_version }} already installed, skipping build"
          else
            git clone https://github.com/rbenv/ruby-build.git
            PREFIX=/usr/local sudo ./ruby-build/install.sh
            export MAKEFLAGS="-j$(nproc)"
            export RUBY_CONFIGURE_OPTS="--disable-shared --disable-install-doc --disable-install-rdoc"
            sudo ruby-build ${{ matrix.ruby_version }} /opt/rubies/${{ matrix.ruby_version }}
          fi

      - name: Bundle install
        run: bundle install -j3

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.sys.rust_toolchain }}

      - name: 🧪 Run tests
        run: bundle exec rake test

      - name: "🧱 Generate bindings"
        run: "bundle exec rake bindings:generate"

      - uses: actions/upload-artifact@v3
        with:
          name: generated-bindings
          path: /tmp/bindings/**/*
          if-no-files-found: error
