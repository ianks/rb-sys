use crate::{ruby_value_type, ID, VALUE};

/* automatically generated by rust-bindgen 0.59.2 */

extern "C" {
    #[link_name = "ruby_macros_RB_TYPE_P"]
    pub fn RB_TYPE_P(obj: VALUE, t: ruby_value_type) -> bool;

    #[link_name = "ruby_macros_RB_INTEGER_TYPE_P"]
    pub fn RB_INTEGER_TYPE_P(obj: VALUE) -> bool;

    #[link_name = "ruby_macros_RB_FLOAT_TYPE_P"]
    pub fn RB_FLOAT_TYPE_P(obj: VALUE) -> bool;

    #[link_name = "ruby_macros_SYMBOL_P"]
    pub fn SYMBOL_P(obj: VALUE) -> bool;

    #[link_name = "ruby_macros_NIL_P"]
    pub fn NIL_P(obj: VALUE) -> bool;

    #[link_name = "ruby_macros_RB_TEST"]
    pub fn RB_TEST(obj: VALUE) -> bool;

    #[link_name = "ruby_macros_ID2SYM"]
    pub fn ID2SYM(obj: ID) -> VALUE;

    #[link_name = "ruby_macros_SYM2ID"]
    pub fn SYM2ID(obj: ID) -> VALUE;
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::ruby_special_consts::*;
    use crate::*;

    #[test]
    fn test_nil_p() {
        assert!(unsafe { NIL_P(RUBY_Qnil as u64) });
    }

    #[test]
    fn test_rb_test() {
        assert!(!unsafe { RB_TEST(RUBY_Qnil as u64) });
    }

    #[cfg(feature = "link-ruby")]
    #[test]
    fn test_symbol_p() {
        unsafe { ruby_init() };
        let sym = unsafe { ID2SYM(rb_intern("foo\0".as_ptr() as *const i8)) };

        assert!(unsafe { SYMBOL_P(sym) });
    }

    #[test]
    fn test_integer_type_p() {
        let int = unsafe { rb_num2fix(1) };

        assert!(unsafe { RB_INTEGER_TYPE_P(int) });
    }

    #[test]
    fn test_rb_float_type_p() {
        let float = unsafe { rb_float_new(1.0) };

        assert!(unsafe { RB_FLOAT_TYPE_P(float) });
    }
}
